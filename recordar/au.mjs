/*
let version=3;
let remainderBits=[0,7,7,7,7,7,0,0,0,0,0,0,0,3,3,3,3,3,3,3,4,4,4,4,4,4,4,3,3,3,3,3,3,3,0,0,0,0,0,0,0]
let remainderxVersion=remainderBits[version-1]; //esto es para agregar despues de codificar los errores
*/

function makeGroups(version, lvlCorrection, data) {
    let group1 = []
    let group2 = []
    let blocks = [{ "L": [1, 19, 0, 0], "M": [1, 16, 0, 0], "Q": [1, 13, 0, 0], "H": [1, 9, 0, 0] }, { "L": [1, 34, 0, 0], "M": [1, 28, 0, 0], "Q": [1, 22, 0, 0], "H": [1, 16, 0, 0] }, { "L": [1, 55, 0, 0], "M": [1, 44, 0, 0], "Q": [2, 17, 0, 0], "H": [2, 13, 0, 0] }, { "L": [1, 80, 0, 0], "M": [2, 32, 0, 0], "Q": [2, 24, 0, 0], "H": [4, 9, 0, 0] }, { "L": [1, 108, 0, 0], "M": [2, 43, 0, 0], "Q": [2, 15, 2, 16], "H": [2, 11, 2, 12] }, { "L": [2, 68, 0, 0], "M": [4, 27, 0, 0], "Q": [4, 19, 0, 0], "H": [4, 15, 0, 0] }, { "L": [2, 78, 0, 0], "M": [4, 31, 0, 0], "Q": [2, 14, 4, 15], "H": [4, 13, 1, 14] }, { "L": [2, 97, 0, 0], "M": [2, 38, 2, 39], "Q": [4, 18, 2, 19], "H": [4, 14, 2, 15] }, { "L": [2, 116, 0, 0], "M": [3, 36, 2, 37], "Q": [4, 16, 4, 17], "H": [4, 12, 4, 13] }, { "L": [2, 68, 2, 69], "M": [4, 43, 1, 44], "Q": [6, 19, 2, 20], "H": [6, 15, 2, 16] }, { "L": [4, 81, 0, 0], "M": [1, 50, 4, 51], "Q": [4, 22, 4, 23], "H": [3, 12, 8, 13] }, { "L": [2, 92, 2, 93], "M": [6, 36, 2, 37], "Q": [4, 20, 6, 21], "H": [7, 14, 4, 15] }, { "L": [4, 107, 0, 0], "M": [8, 37, 1, 38], "Q": [8, 20, 4, 21], "H": [12, 11, 4, 12] }, { "L": [3, 115, 1, 116], "M": [4, 40, 5, 41], "Q": [11, 16, 5, 17], "H": [11, 12, 5, 13] }, { "L": [5, 87, 1, 88], "M": [5, 41, 5, 42], "Q": [5, 24, 7, 25], "H": [11, 12, 7, 13] }, { "L": [5, 98, 1, 99], "M": [7, 45, 3, 46], "Q": [15, 19, 2, 20], "H": [3, 15, 13, 16] }, { "L": [1, 107, 5, 108], "M": [10, 46, 1, 47], "Q": [1, 22, 15, 23], "H": [2, 14, 17, 15] }, { "L": [5, 120, 1, 121], "M": [9, 43, 4, 44], "Q": [17, 22, 1, 23], "H": [2, 14, 19, 15] }, { "L": [3, 113, 4, 114], "M": [3, 44, 11, 45], "Q": [17, 21, 4, 22], "H": [9, 13, 16, 14] }, { "L": [3, 107, 5, 108], "M": [3, 41, 13, 42], "Q": [15, 24, 5, 25], "H": [15, 15, 10, 16] }, { "L": [4, 116, 4, 117], "M": [17, 42, 0, 0], "Q": [17, 22, 6, 23], "H": [19, 16, 6, 17] }, { "L": [2, 111, 7, 112], "M": [17, 46, 0, 0], "Q": [7, 24, 16, 25], "H": [34, 13, 0, 0] }, { "L": [4, 121, 5, 122], "M": [4, 47, 14, 48], "Q": [11, 24, 14, 25], "H": [16, 15, 14, 16] }, { "L": [6, 117, 4, 118], "M": [6, 45, 14, 46], "Q": [11, 24, 16, 25], "H": [30, 16, 2, 17] }, { "L": [8, 106, 4, 107], "M": [8, 47, 13, 48], "Q": [7, 24, 22, 25], "H": [22, 15, 13, 16] }, { "L": [10, 114, 2, 115], "M": [19, 46, 4, 47], "Q": [28, 22, 6, 23], "H": [33, 16, 4, 17] }, { "L": [8, 122, 4, 123], "M": [22, 45, 3, 46], "Q": [8, 23, 26, 24], "H": [12, 15, 28, 16] }, { "L": [3, 117, 10, 118], "M": [3, 45, 23, 46], "Q": [4, 24, 31, 25], "H": [11, 15, 31, 16] }, { "L": [7, 116, 7, 117], "M": [21, 45, 7, 46], "Q": [1, 23, 37, 24], "H": [19, 15, 26, 16] }, { "L": [5, 115, 10, 116], "M": [19, 47, 10, 48], "Q": [15, 24, 25, 25], "H": [23, 15, 25, 16] }, { "L": [13, 115, 3, 116], "M": [2, 46, 29, 47], "Q": [42, 24, 1, 25], "H": [23, 15, 28, 16] }, { "L": [17, 115, 0, 0], "M": [10, 46, 23, 47], "Q": [10, 24, 35, 25], "H": [19, 15, 35, 16] }, { "L": [17, 115, 1, 116], "M": [14, 46, 21, 47], "Q": [29, 24, 19, 25], "H": [11, 15, 46, 16] }, { "L": [13, 115, 6, 116], "M": [14, 46, 23, 47], "Q": [44, 24, 7, 25], "H": [59, 16, 1, 17] }, { "L": [12, 121, 7, 122], "M": [12, 47, 26, 48], "Q": [39, 24, 14, 25], "H": [22, 15, 41, 16] }, { "L": [6, 121, 14, 122], "M": [6, 47, 34, 48], "Q": [46, 24, 10, 25], "H": [2, 15, 64, 16] }, { "L": [17, 122, 4, 123], "M": [29, 46, 14, 47], "Q": [49, 24, 10, 25], "H": [24, 15, 46, 16] }, { "L": [4, 122, 18, 123], "M": [13, 46, 32, 47], "Q": [48, 24, 14, 25], "H": [42, 15, 32, 16] }, { "L": [20, 117, 4, 118], "M": [40, 47, 7, 48], "Q": [43, 24, 22, 25], "H": [10, 15, 67, 16] }, { "L": [19, 118, 6, 119], "M": [18, 47, 31, 48], "Q": [34, 24, 34, 25], "H": [20, 15, 61, 16] }];
    let blocksXlevel = blocks[version - 1][lvlCorrection];

    let initial = 0;
    for (let j = 0; j < blocksXlevel[0]; j++) {
        group1.push(data.slice(initial, blocksXlevel[1] + initial))
        initial += blocksXlevel[1];
    }
    if (blocksXlevel[2] != 0) {
        for (let j = 0; j < blocksXlevel[2]; j++) {
            group2.push(data.slice(initial, blocksXlevel[3] + initial))
            initial += blocksXlevel[2];
        }
    }


    return [group1, group2];
}

//let data=[32,  91,  11, 120, 209, 114, 220,  77,  67,  64, 236,17, 236,  17, 236,  17, 236,  17, 236,  17, 236,  17,236,  17, 236,  17, 236,  17, 236,  17, 236,  17, 236,17, 236,  17, 236,  17, 236,  17, 236,  17, 236,  17,236,  17, 236,  17, 236,  17, 236,  17, 236,  17, 236,17, 236,  17, 236,  17, 236,  17]
//console.log(makeGroups(5, "Q", data))

/*let groups = [
    [
        [67, 85, 70, 134, 87, 38, 85, 194, 119, 50, 6, 18, 6, 103, 38],
        [246, 246, 66, 7, 118, 134, 242, 7, 38, 86, 22, 198, 199, 146, 6]
    ],
    [
        [182, 230, 247, 119, 50, 7, 118, 134, 87, 38, 82, 6, 134, 151, 50, 7],
        [70, 247, 118, 86, 194, 6, 151, 50, 16, 236, 17, 236, 17, 236, 17, 236]
    ]];

let groups = [
    [
        [213,199,11,45,115,247,241,223,229,248,154,117,154,111,86,161,111,39],
        [87,204,96,60,202,182,124,157,200,134,27,129,209,17,163,163,120,133]
    ],
    [
        [148,116,177,212,76,133,75,242,238,76,195,230,189,10,108,240,192,141],
        [235,159,5,173,24,147,59,33,106,40,255,172,82,2,131,32,178,236]
    ]];

disposiciÃ³n:
cw1b1   67
cw1b2   246
cw1b3   182
cw1b4   70
cw2b1   85
..
ec1b1   213
ec1b2   87
ec1b3   148
ec1b4   235
ec2b1   199
..
*/



export default makeGroups;
